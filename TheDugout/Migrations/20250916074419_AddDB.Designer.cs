// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheDugout.Data;

#nullable disable

namespace TheDugout.Migrations
{
    [DbContext(typeof(DugoutDbContext))]
    [Migration("20250916074419_AddDB")]
    partial class AddDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheDugout.Models.Common.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TheDugout.Models.Common.FirstName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("RegionCode");

                    b.ToTable("FirstNames");
                });

            modelBuilder.Entity("TheDugout.Models.Common.LastName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("RegionCode");

                    b.ToTable("LastNames");
                });

            modelBuilder.Entity("TheDugout.Models.Common.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.Cup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoundsCount")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsCount")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Cups");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.CupRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CupId");

                    b.ToTable("CupRounds");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.CupTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CupId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CupId");

                    b.HasIndex("TeamId");

                    b.ToTable("CupTeams");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.CupTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxTeams")
                        .HasColumnType("int");

                    b.Property<int?>("MinTeams")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CupTemplates");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TemplateId");

                    b.ToTable("EuropeanCups", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EuropeanCupId")
                        .HasColumnType("int");

                    b.Property<int>("PhaseTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EuropeanCupId");

                    b.HasIndex("PhaseTemplateId");

                    b.ToTable("EuropeanCupPhases", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupPhaseTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EuropeanCupTemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsKnockout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTwoLegged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EuropeanCupTemplateId");

                    b.HasIndex("Order");

                    b.ToTable("EuropeanCupPhaseTemplates", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupStanding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Draws")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EuropeanCupId")
                        .HasColumnType("int");

                    b.Property<int>("GoalDifference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalsAgainst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalsFor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Losses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Matches")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Ranking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("EuropeanCupId", "TeamId")
                        .IsUnique();

                    b.ToTable("EuropeanCupStandings", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EuropeanCupId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("EuropeanCupId", "TeamId")
                        .IsUnique();

                    b.ToTable("EuropeanCupTeams", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LeaguePhaseMatchesPerTeam")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<int>("TeamsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EuropeanCupTemplates", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionSpots")
                        .HasColumnType("int");

                    b.Property<int>("RelegationSpots")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsCount")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Leagues", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.LeagueStanding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Draws")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<int>("GoalDifference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalsAgainst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalsFor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Matches")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Ranking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.HasIndex("LeagueId", "TeamId")
                        .IsUnique();

                    b.ToTable("LeagueStandings", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.LeagueTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("LeagueCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PromotionSpots")
                        .HasColumnType("int");

                    b.Property<int>("RelegationSpots")
                        .HasColumnType("int");

                    b.Property<int>("TeamsCount")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("LeagueTemplates");
                });

            modelBuilder.Entity("TheDugout.Models.Finance.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId")
                        .IsUnique();

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("TheDugout.Models.Finance.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FromAgencyId")
                        .HasColumnType("int");

                    b.Property<int?>("FromTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("ToAgencyId")
                        .HasColumnType("int");

                    b.Property<int?>("ToTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("FromAgencyId");

                    b.HasIndex("FromTeamId");

                    b.HasIndex("ToAgencyId");

                    b.HasIndex("ToTeamId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("TheDugout.Models.Game.GameSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserTeamId");

                    b.ToTable("GameSaves", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Game.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentSaveId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentSaveId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TheDugout.Models.Matches.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwayTeamGoals")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("CompetitionType")
                        .HasColumnType("int");

                    b.Property<int?>("CupRoundId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EuropeanCupPhaseId")
                        .HasColumnType("int");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeTeamGoals")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CupRoundId");

                    b.HasIndex("EuropeanCupPhaseId");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("TheDugout.Models.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MessageTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsRead");

                    b.HasIndex("MessageTemplateId");

                    b.HasIndex("GameSaveId", "Date");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TheDugout.Models.Messages.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("en");

                    b.Property<string>("PlaceholdersJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectTemplate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Category", "IsActive");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("TheDugout.Models.Messages.MessageTemplatePlaceholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MessageTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MessageTemplateId", "Name")
                        .IsUnique();

                    b.ToTable("MessageTemplatePlaceholders");
                });

            modelBuilder.Entity("TheDugout.Models.Players.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Players.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<double>("HeightCm")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("KitNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<double>("WeightKg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TheDugout.Models.Players.PlayerAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("PlayerId", "AttributeId")
                        .IsUnique();

                    b.ToTable("PlayerAttributes", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Players.PlayerMatchStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerMatchStats");
                });

            modelBuilder.Entity("TheDugout.Models.Players.PlayerSeasonStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("PlayerSeasonStats");
                });

            modelBuilder.Entity("TheDugout.Models.Players.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Players.PositionWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasPrecision(4, 2)
                        .HasColumnType("float(4)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("PositionId", "AttributeId")
                        .IsUnique();

                    b.ToTable("PositionWeights", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Seasons.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("TheDugout.Models.Seasons.SeasonEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonEvents");
                });

            modelBuilder.Entity("TheDugout.Models.Staff.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyTemplateId")
                        .HasColumnType("int");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalEarnings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("AgencyTemplateId");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("RegionId");

                    b.ToTable("Agencies", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Staff.AgencyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("AgencyTemplates", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Teams.Tactic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Defenders")
                        .HasColumnType("int");

                    b.Property<int>("Forwards")
                        .HasColumnType("int");

                    b.Property<int>("Midfielders")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tactics", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Teams.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("LogoFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Teams.TeamTactic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LineupJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TacticId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TacticId");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("TeamTactics", (string)null);
                });

            modelBuilder.Entity("TheDugout.Models.Teams.TeamTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LeagueId");

                    b.ToTable("TeamTemplates");
                });

            modelBuilder.Entity("TheDugout.Models.Training.PlayerTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeValue")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("PlayerTrainings");
                });

            modelBuilder.Entity("TheDugout.Models.Training.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("TheDugout.Models.Transfers.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FromTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFreeAgent")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("ToTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromTeamId");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("ToTeamId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("TheDugout.Models.Common.Country", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TheDugout.Models.Common.FirstName", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Region", "Region")
                        .WithMany("FirstNames")
                        .HasForeignKey("RegionCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TheDugout.Models.Common.LastName", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Region", "Region")
                        .WithMany("LastNames")
                        .HasForeignKey("RegionCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.Cup", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Cups")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("Cups")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.CupTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GameSave");

                    b.Navigation("Season");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.CupRound", b =>
                {
                    b.HasOne("TheDugout.Models.Competitions.Cup", "Cup")
                        .WithMany("Rounds")
                        .HasForeignKey("CupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cup");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.CupTeam", b =>
                {
                    b.HasOne("TheDugout.Models.Competitions.Cup", "Cup")
                        .WithMany("Teams")
                        .HasForeignKey("CupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "Team")
                        .WithMany("CupTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cup");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCup", b =>
                {
                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany()
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("EuropeanCups")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.EuropeanCupTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSave");

                    b.Navigation("Season");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupPhase", b =>
                {
                    b.HasOne("TheDugout.Models.Competitions.EuropeanCup", "EuropeanCup")
                        .WithMany("Phases")
                        .HasForeignKey("EuropeanCupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.EuropeanCupPhaseTemplate", "PhaseTemplate")
                        .WithMany()
                        .HasForeignKey("PhaseTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EuropeanCup");

                    b.Navigation("PhaseTemplate");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupPhaseTemplate", b =>
                {
                    b.HasOne("TheDugout.Models.Competitions.EuropeanCupTemplate", null)
                        .WithMany("PhaseTemplates")
                        .HasForeignKey("EuropeanCupTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupStanding", b =>
                {
                    b.HasOne("TheDugout.Models.Competitions.EuropeanCup", "EuropeanCup")
                        .WithMany("Standings")
                        .HasForeignKey("EuropeanCupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "Team")
                        .WithMany("EuropeanCupStandings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EuropeanCup");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupTeam", b =>
                {
                    b.HasOne("TheDugout.Models.Competitions.EuropeanCup", "EuropeanCup")
                        .WithMany("Teams")
                        .HasForeignKey("EuropeanCupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "Team")
                        .WithMany("EuropeanCupTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EuropeanCup");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.League", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Leagues")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("Leagues")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.LeagueTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GameSave");

                    b.Navigation("Season");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.LeagueStanding", b =>
                {
                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("LeagueStandings")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.League", "League")
                        .WithMany("Standings")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("LeagueStandings")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "Team")
                        .WithMany("LeagueStandings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSave");

                    b.Navigation("League");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.LeagueTemplate", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Country", "Country")
                        .WithMany("LeagueTemplates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TheDugout.Models.Finance.Bank", b =>
                {
                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithOne("Bank")
                        .HasForeignKey("TheDugout.Models.Finance.Bank", "GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSave");
                });

            modelBuilder.Entity("TheDugout.Models.Finance.FinancialTransaction", b =>
                {
                    b.HasOne("TheDugout.Models.Finance.Bank", "Bank")
                        .WithMany("Transactions")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheDugout.Models.Staff.Agency", "FromAgency")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("FromAgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Teams.Team", "FromTeam")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("FromTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Staff.Agency", "ToAgency")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ToAgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Teams.Team", "ToTeam")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ToTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bank");

                    b.Navigation("FromAgency");

                    b.Navigation("FromTeam");

                    b.Navigation("ToAgency");

                    b.Navigation("ToTeam");
                });

            modelBuilder.Entity("TheDugout.Models.Game.GameSave", b =>
                {
                    b.HasOne("TheDugout.Models.Game.User", "User")
                        .WithMany("GameSaves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "UserTeam")
                        .WithMany()
                        .HasForeignKey("UserTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");

                    b.Navigation("UserTeam");
                });

            modelBuilder.Entity("TheDugout.Models.Game.User", b =>
                {
                    b.HasOne("TheDugout.Models.Game.GameSave", "CurrentSave")
                        .WithMany()
                        .HasForeignKey("CurrentSaveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentSave");
                });

            modelBuilder.Entity("TheDugout.Models.Matches.Fixture", b =>
                {
                    b.HasOne("TheDugout.Models.Teams.Team", "AwayTeam")
                        .WithMany("AwayFixtures")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.CupRound", "CupRound")
                        .WithMany("Fixtures")
                        .HasForeignKey("CupRoundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Competitions.EuropeanCupPhase", "EuropeanCupPhase")
                        .WithMany("Fixtures")
                        .HasForeignKey("EuropeanCupPhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Fixtures")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "HomeTeam")
                        .WithMany("HomeFixtures")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.League", "League")
                        .WithMany("Fixtures")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("Fixtures")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwayTeam");

                    b.Navigation("CupRound");

                    b.Navigation("EuropeanCupPhase");

                    b.Navigation("GameSave");

                    b.Navigation("HomeTeam");

                    b.Navigation("League");

                    b.Navigation("Season");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("TheDugout.Models.Messages.Message", b =>
                {
                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Messages")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheDugout.Models.Messages.MessageTemplate", "MessageTemplate")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameSave");

                    b.Navigation("MessageTemplate");
                });

            modelBuilder.Entity("TheDugout.Models.Messages.MessageTemplatePlaceholder", b =>
                {
                    b.HasOne("TheDugout.Models.Messages.MessageTemplate", "MessageTemplate")
                        .WithMany("Placeholders")
                        .HasForeignKey("MessageTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageTemplate");
                });

            modelBuilder.Entity("TheDugout.Models.Players.Player", b =>
                {
                    b.HasOne("TheDugout.Models.Staff.Agency", "Agency")
                        .WithMany("Players")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Common.Country", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Players")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Players.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Agency");

                    b.Navigation("Country");

                    b.Navigation("GameSave");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheDugout.Models.Players.PlayerAttribute", b =>
                {
                    b.HasOne("TheDugout.Models.Players.Attribute", "Attribute")
                        .WithMany("PlayerAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Players.Player", "Player")
                        .WithMany("Attributes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TheDugout.Models.Players.PlayerMatchStats", b =>
                {
                    b.HasOne("TheDugout.Models.Players.Player", "Player")
                        .WithMany("MatchStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TheDugout.Models.Players.PlayerSeasonStats", b =>
                {
                    b.HasOne("TheDugout.Models.Players.Player", "Player")
                        .WithMany("SeasonStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("PlayerStats")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("TheDugout.Models.Players.PositionWeight", b =>
                {
                    b.HasOne("TheDugout.Models.Players.Attribute", "Attribute")
                        .WithMany("PositionWeights")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Players.Position", "Position")
                        .WithMany("Weights")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TheDugout.Models.Seasons.Season", b =>
                {
                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Seasons")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSave");
                });

            modelBuilder.Entity("TheDugout.Models.Seasons.SeasonEvent", b =>
                {
                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("Events")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("TheDugout.Models.Staff.Agency", b =>
                {
                    b.HasOne("TheDugout.Models.Staff.AgencyTemplate", "AgencyTemplate")
                        .WithMany()
                        .HasForeignKey("AgencyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Agencies")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Common.Region", "Region")
                        .WithMany("Agencies")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgencyTemplate");

                    b.Navigation("GameSave");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TheDugout.Models.Teams.Team", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("Teams")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Competitions.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Teams.TeamTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GameSave");

                    b.Navigation("League");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TheDugout.Models.Teams.TeamTactic", b =>
                {
                    b.HasOne("TheDugout.Models.Teams.Tactic", "Tactic")
                        .WithMany("TeamTactics")
                        .HasForeignKey("TacticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "Team")
                        .WithOne("TeamTactic")
                        .HasForeignKey("TheDugout.Models.Teams.TeamTactic", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tactic");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheDugout.Models.Teams.TeamTemplate", b =>
                {
                    b.HasOne("TheDugout.Models.Common.Country", "Country")
                        .WithMany("TeamTemplates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheDugout.Models.Competitions.LeagueTemplate", "League")
                        .WithMany("TeamTemplates")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("League");
                });

            modelBuilder.Entity("TheDugout.Models.Training.PlayerTraining", b =>
                {
                    b.HasOne("TheDugout.Models.Players.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Training.TrainingSession", "TrainingSession")
                        .WithMany("PlayerTrainings")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Player");

                    b.Navigation("TrainingSession");
                });

            modelBuilder.Entity("TheDugout.Models.Training.TrainingSession", b =>
                {
                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "Team")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSave");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TheDugout.Models.Transfers.Transfer", b =>
                {
                    b.HasOne("TheDugout.Models.Teams.Team", "FromTeam")
                        .WithMany()
                        .HasForeignKey("FromTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TheDugout.Models.Game.GameSave", "GameSave")
                        .WithMany()
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Seasons.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDugout.Models.Teams.Team", "ToTeam")
                        .WithMany()
                        .HasForeignKey("ToTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromTeam");

                    b.Navigation("GameSave");

                    b.Navigation("Player");

                    b.Navigation("Season");

                    b.Navigation("ToTeam");
                });

            modelBuilder.Entity("TheDugout.Models.Common.Country", b =>
                {
                    b.Navigation("LeagueTemplates");

                    b.Navigation("Players");

                    b.Navigation("TeamTemplates");
                });

            modelBuilder.Entity("TheDugout.Models.Common.Region", b =>
                {
                    b.Navigation("Agencies");

                    b.Navigation("Countries");

                    b.Navigation("FirstNames");

                    b.Navigation("LastNames");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.Cup", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.CupRound", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCup", b =>
                {
                    b.Navigation("Phases");

                    b.Navigation("Standings");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupPhase", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.EuropeanCupTemplate", b =>
                {
                    b.Navigation("PhaseTemplates");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.League", b =>
                {
                    b.Navigation("Fixtures");

                    b.Navigation("Standings");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TheDugout.Models.Competitions.LeagueTemplate", b =>
                {
                    b.Navigation("TeamTemplates");
                });

            modelBuilder.Entity("TheDugout.Models.Finance.Bank", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TheDugout.Models.Game.GameSave", b =>
                {
                    b.Navigation("Agencies");

                    b.Navigation("Bank")
                        .IsRequired();

                    b.Navigation("Cups");

                    b.Navigation("Fixtures");

                    b.Navigation("LeagueStandings");

                    b.Navigation("Leagues");

                    b.Navigation("Messages");

                    b.Navigation("Players");

                    b.Navigation("Seasons");

                    b.Navigation("Teams");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("TheDugout.Models.Game.User", b =>
                {
                    b.Navigation("GameSaves");
                });

            modelBuilder.Entity("TheDugout.Models.Messages.MessageTemplate", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Placeholders");
                });

            modelBuilder.Entity("TheDugout.Models.Players.Attribute", b =>
                {
                    b.Navigation("PlayerAttributes");

                    b.Navigation("PositionWeights");
                });

            modelBuilder.Entity("TheDugout.Models.Players.Player", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("MatchStats");

                    b.Navigation("SeasonStats");
                });

            modelBuilder.Entity("TheDugout.Models.Players.Position", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Weights");
                });

            modelBuilder.Entity("TheDugout.Models.Seasons.Season", b =>
                {
                    b.Navigation("Cups");

                    b.Navigation("EuropeanCups");

                    b.Navigation("Events");

                    b.Navigation("Fixtures");

                    b.Navigation("LeagueStandings");

                    b.Navigation("Leagues");

                    b.Navigation("PlayerStats");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("TheDugout.Models.Staff.Agency", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });

            modelBuilder.Entity("TheDugout.Models.Teams.Tactic", b =>
                {
                    b.Navigation("TeamTactics");
                });

            modelBuilder.Entity("TheDugout.Models.Teams.Team", b =>
                {
                    b.Navigation("AwayFixtures");

                    b.Navigation("CupTeams");

                    b.Navigation("EuropeanCupStandings");

                    b.Navigation("EuropeanCupTeams");

                    b.Navigation("HomeFixtures");

                    b.Navigation("LeagueStandings");

                    b.Navigation("Players");

                    b.Navigation("TeamTactic");

                    b.Navigation("TrainingSessions");

                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });

            modelBuilder.Entity("TheDugout.Models.Training.TrainingSession", b =>
                {
                    b.Navigation("PlayerTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
